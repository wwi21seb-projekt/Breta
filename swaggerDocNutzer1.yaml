openapi: 3.0.0
info:
  title: Nutzer API
  description: Ein Grundgerüst für eine mögliche Nutzer API. 
  version: 1.0.0
servers:
  - url: http://api.example.com/v1/
paths:
  /nutzer{username}:
    get:
      summary: Gibt alle Nutzerdaten zu einem Nutzer aus.
      description: Für die UserSotry "Als Nutzer möchte ich die Option haben, Nutzerprofile einzusehen und grundlegende Informationen über sie zu erhalten."
      parameters:
        - name: username
          in: path
          required: true
          description: Um den username so nutzen zu können muss dieser Unique sein! Alternativ ginge auch eine userID (mit bspw. UUID).
          schema:
            type: string
      responses:
        '200':    # status code
          description: Ein JSON Objekt mit daten über den Nutzer
          content:
            application/json:
              schema: 
                type: object
                properties:
                  username:
                    type: string
                    example: username123  
                  name:
                    type: string
                    example: Aleks
                  email:
                    type: string
                    example: aleks@gmail.com
                  biografie:
                    type: string
                    example: Ich mag Gewichte!
        '404':
          description: Den User mit dem gesendeten Username gibt es nicht.
          content:
            application/json:
              schema:
                type: string
                example: "Es wurde kein User mit dem Username <username> gefunden"
        '500':
          description: Interner Server Fehler auf Seite des Backends.
          content:
            application/json:
              schema:
                type: string
                example: "Es ist ein interner Fehler aufgetreten, die Anfrage konnte nicht bearbeitet werden."
  /nutzer:
    post:
      summary: Sendet alle benötigten Daten für die Registrierung eines Nutzers an das Backend.
      description: Für die UserStory "Als Nutzer möchte ich mich mit Email und Passwort registrieren können, um einen gesicherten Zugang zu meinem Account zu haben und konfigurieren zu können"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: username123
                name:
                  type: string
                  example: Aleks
                email:
                  type: string
                  example: aleks@gmail.com
                passwort:
                  type: string
                  example: passwort123
      responses:
        '200':    # status code
          description: Eine bestätigung das der Nutzer registriert wurde und seine erfassten Daten. 
          content:
            application/json:
              schema: 
                type: object
                properties:
                  username:
                    type: string
                    example: username123  
                  name:
                    type: string
                    example: Aleks
                  email:
                    type: string
                    example: aleks@gmail.com
                  jwt:
                    type: object
                    properties:
                      token:
                        type: object
                      refreshToken:
                        type: object
        '500':
            description: Interner Server Fehler auf Seite des Backends.
            content:
              application/json:
                schema:
                  type: string
                  example: "Es ist ein interner Fehler aufgetreten, die Anfrage konnte nicht bearbeitet werden."
    get:
      summary: Meldet einen Nutzer an.
      description: Für die UserSotry "Als Nutzer möchte ich mich mit Email und Passwort registrieren können, um einen gesicherten Zugang zu meinem Account zu haben und konfigurieren zu können".
      parameters:
        - name: username
          in: query
          required: true
          description: Um den username so nutzen zu können muss dieser Unique sein! Alternativ ginge auch eine userID (mit bspw. UUID).
          schema:
            type: string
        - name: password
          in: query
          required: true
          description: Das eingegebene passwort, welches im Backend überprüft werden soll.
          schema:
            type: string
      responses:
        '200':    # status code
          description: Ein JSON Objekt mit einem JWT Token (oder ähnliches)
          content:
            application/json:
              schema: 
                type: object
                properties:
                  message:
                    type: string
                    example: Der Login war erfolgreich  
                  jwt:
                    type: object
                    properties:
                      token:
                        type: object
                      refreshToken:
                        type: object
        '404':
          description: Den User mit dem gesendeten Username gibt es nicht.
          content:
            application/json:
              schema:
                type: string
                example: "Es wurde kein User mit dem Username <username> gefunden"
        '401':
          description: Das eingegebne Passwort war falsch.
          content:
            application/json:
              schema:
                type: string
                example: "Das eingegebne Passwort war falsch."
        '500':
          description: Interner Server Fehler auf Seite des Backends.
          content:
            application/json:
              schema:
                type: string
                example: "Es ist ein interner Fehler aufgetreten, die Anfrage konnte nicht bearbeitet werden."